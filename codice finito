#include <Arduino.h>
#include <U8g2lib.h>
#include <MUIU8g2.h>
#include <Versatile_RotaryEncoder.h>
#include <SimpleDHT.h>

#ifdef U8X8_HAVE_HW_SPI

#include <SPI.h>
#endif
#ifdef U8X8_HAVE_HW_I2C

#include <Wire.h>
#endif
#define clk 2
#define dt 3
#define sw 4

int pinDHT11 = 7;
SimpleDHT11 dht11(pinDHT11);

Versatile_RotaryEncoder versatile_encoder(clk, dt, sw);

U8G2_ST7920_128X64_1_SW_SPI u8g2(U8G2_R0, 13,  11,  10,  8);

MUIU8G2 mui;

uint16_t animal_idx = 0;
bool mot = 0;
long stop_watch_timer = 0;                     
long stop_watch_millis = 0;                      
uint8_t is_stop_watch_running = 1;  

const char *animals[] = { "OFF", "ON" };

uint16_t animal_name_list_get_cnt(void *data) {
  return sizeof(animals)/sizeof(*animals);    
}

const char *animal_name_list_get_str(void *data, uint16_t index) {
  return animals[index];
}


uint8_t mui_hrule(mui_t *ui, uint8_t msg) {
  if ( msg == MUIF_MSG_DRAW ) {
      u8g2.drawHLine(0, mui_get_y(ui), u8g2.getDisplayWidth());
  }
  return 0;
}


uint8_t show_my_data(mui_t *ui, uint8_t msg) {
  if ( msg == MUIF_MSG_DRAW ) {
    u8g2_uint_t x = mui_get_x(ui);
    u8g2_uint_t y = mui_get_y(ui);
    byte temperature = 0;
  byte humidity = 0;
  int err = SimpleDHTErrSuccess;
  if ((err = dht11.read(&temperature, &humidity, NULL)) != SimpleDHTErrSuccess) {
    Serial.print("Read DHT11 failed, err="); Serial.print(SimpleDHTErrCode(err));
    Serial.print(","); Serial.println(SimpleDHTErrDuration(err)); delay(1000);
    return;
  }
  
  //TYPE CASTING
  int t = (int)temperature;
  int u = (int)humidity;

    u8g2.setCursor(x+5, y);
    u8g2.print("Luminosita':");
    u8g2.setCursor(x+85, y);
    u8g2.print(map(analogRead(A0),0,1000,100,0));
        u8g2.setCursor(x+100, y);
    u8g2.print("%");

    u8g2.setCursor(x+5, y+12);
    u8g2.print("Temperatura:");
    u8g2.setCursor(x+85, y+12);
    u8g2.print(t);
        u8g2.setCursor(x+100, y+12);
    u8g2.print("C");

    u8g2.setCursor(x+5, y+24);
    u8g2.print("Umidita':");
    u8g2.setCursor(x+85, y+24);
    u8g2.print(u);  
        u8g2.setCursor(x+100, y+24);
    u8g2.print("%");

    u8g2.setCursor(x+5, y+36);
    u8g2.print("Stato Motore:");
    u8g2.setCursor(x+85, y+36);
    if(animal_idx==1){
      u8g2.print("ON");  
    }else{ u8g2.print("OFF");  }

  }
  return 0;
}

uint8_t mui_draw_current_timer(mui_t *ui, uint8_t msg) {
  if ( msg == MUIF_MSG_DRAW ) {
      u8g2.setCursor(mui_get_x(ui), mui_get_y(ui));
      u8g2.print(map(analogRead(A0),0,1000,100,0));
      
  }
  return 0;
}


uint8_t mui_start_current_timer(mui_t *ui, uint8_t msg) {
  if ( msg == MUIF_MSG_FORM_START ) {
      is_stop_watch_running = 1;
      stop_watch_millis = millis();
      stop_watch_timer = 0;
  }
  return 0;
}
muif_t muif_list[] = {
  MUIF_U8G2_FONT_STYLE(0, u8g2_font_helvR08_tr),        /* regular font */
  MUIF_U8G2_FONT_STYLE(1, u8g2_font_helvB08_tr),        /* bold font */
  MUIF_U8G2_FONT_STYLE(2, u8g2_font_finderskeepers_tr), 


  MUIF_RO("HR", mui_hrule),
  MUIF_U8G2_LABEL(),
  MUIF_RO("GP",mui_u8g2_goto_data),  
  MUIF_BUTTON("GC", mui_u8g2_goto_form_w1_pi),

  MUIF_U8G2_U8_MIN_MAX("NV", &num_value, 0, 99, mui_u8g2_u8_min_max_wm_mud_pi),
  MUIF_U8G2_U8_MIN_MAX_STEP("NB", &bar_value, 0, 16, 1, MUI_MMS_2X_BAR, mui_u8g2_u8_bar_wm_mud_pf),
  MUIF_U8G2_U16_LIST("NA", &animal_idx, NULL, animal_name_list_get_str, animal_name_list_get_cnt, mui_u8g2_u16_list_line_wa_mud_pi),


  MUIF_RO("SH", show_my_data), 
  MUIF_RO("CT", mui_draw_current_timer),
  MUIF_RO("ST", mui_start_current_timer),
 
  MUIF_EXECUTE_ON_SELECT_BUTTON("GO", mui_u8g2_btn_goto_wm_fi)  
};


fds_t fds_data[] = 

MUI_FORM(12)
MUI_STYLE(1)
MUI_LABEL(5, 8, "Ponica Majorana")
MUI_STYLE(0)
MUI_XY("HR", 0,11)
MUI_DATA("GP", 
    MUI_1 "Mostra Dati|"
    MUI_13 "Gestione Motore|"
    MUI_15 "Componenti|"
    MUI_16 "Info")
MUI_XYA("GC", 5, 24, 0) 
MUI_XYA("GC", 5, 36, 1) 
MUI_XYA("GC", 5, 48, 2) 
MUI_XYA("GC", 5, 60, 3) 
 

MUI_FORM(1)
MUI_STYLE(1)
MUI_AUX("ST")
MUI_LABEL(5, 8, "Dati IdroMajo")
MUI_XY("HR", 0,11)
MUI_STYLE(0)
MUI_XY("SH", 0, 23)

MUI_DATA("GP", 
    MUI_12 "O")
MUI_XYA("GC", 164, 75, 0) 

MUI_FORM(15)
MUI_STYLE(2)
MUI_AUX("ST")
MUI_XY("HR", 0,0)
MUI_LABEL(10, 10, "MB: ArduinoMega2560")
MUI_XY("HR", 0,12)
MUI_LABEL(10, 22, "Temperatura: HW-486")
MUI_LABEL(34, 31, "Umidita': DHT11")
MUI_XY("HR", 0,33)
MUI_LABEL(0, 42, "Per info/riparazioni visita:")
MUI_XY("HR", 0,44)
MUI_LABEL(20, 53, "https://github.com/...")
MUI_LABEL(20, 63, "...Tonno16bit/PONICA")
MUI_DATA("GP", 
    MUI_12 "O")
MUI_XYA("GC", 164, 75, 0) 

MUI_FORM(16)
MUI_STYLE(2)
MUI_AUX("ST")
MUI_XY("HR", 0,0)
MUI_LABEL(47, 10, "TonnoOS")
MUI_XY("HR", 0,12)
MUI_LABEL(25, 22, "code_version-1.0.x")
MUI_LABEL(44, 31, "25/01/24")
MUI_XY("HR", 0,33)
MUI_LABEL(34, 42, "PonicStation R1")
MUI_XY("HR", 0,44)
MUI_LABEL(20, 53, "https://github.com/...")
MUI_LABEL(20, 63, "...Tonno16bit/PONICA")
MUI_DATA("GP", 
    MUI_12 "O")
MUI_XYA("GC", 164, 75, 0)  

MUI_FORM(13)
MUI_STYLE(1)
MUI_LABEL(5, 8, "Gestione Motore")
MUI_XY("HR", 0,11)
MUI_STYLE(0)
MUI_LABEL(5,26, "Stato pompa:")

MUI_XYA("NA", 80, 26, 21)
MUI_XYAT("GO", 114, 60, 1, " Ok ") 

;

// global variables for menu redraw and input event handling
uint8_t is_redraw = 1;
uint8_t rotate_event = 0; // 0 = not turning, 1 = CW, 2 = CCW
uint8_t press_event = 0; // 0 = not pushed, 1 = pushed
uint8_t long_press_event = 0; // 0 = not pushed, 1 = pushed


// Functions prototyping to be handled on each Encoder Event
void handleRotate(int8_t rotation) {
  if ( rotation > 0 )
    rotate_event = 2; // CW
  else
    rotate_event = 1; // CCW
}

void handlePressRelease() {
  press_event = 1;
}

void handleLongPressRelease() {
  long_press_event = 1;
}


void setup(void) {

  versatile_encoder.setHandleRotate(handleRotate);
  versatile_encoder.setHandlePressRelease(handlePressRelease);
  versatile_encoder.setHandleLongPressRelease(handleLongPressRelease);
  
  tone(51, 440, 50);
  u8g2.begin();
  mui.begin(u8g2, fds_data, muif_list, sizeof(muif_list)/sizeof(muif_t));
  mui.gotoForm(/* form_id= / 1, / initial_cursor_position= */ 0);
  pinMode(5, OUTPUT);
}


void handle_events(void) {
  // 0 = not turning, 1 = CW, 2 = CCW
  if ( rotate_event == 2 ) {
    mui.nextField();
    is_redraw = 1;
    rotate_event = 0;
  }
  
  if ( rotate_event == 1 ) {
    mui.prevField();
    is_redraw = 1;
    rotate_event = 0;
  }    
  // 0 = not pushed, 1 = pushed  
  if ( press_event == 1 ) {
    mui.sendSelect();
    is_redraw = 1;
    press_event = 0;
    tone(51, 262, 50);
    delay(50);
  }

  // 0 = not pushed, 1 = pushed  
  if ( long_press_event == 1 ) {
    mui.sendSelectWithExecuteOnSelectFieldSearch();
    is_redraw = 1;
    long_press_event = 0;
    tone(51, 262, 200);
    delay(300);
    tone(51, 311, 200);
    delay(300);
    tone(51, 392, 200);
    delay(300);
    tone(51, 415, 200);
    delay(300);
    tone(51, 523, 200);
    delay(900);
    tone(51, 415, 200);
    delay(300);
    tone(51, 392, 200);
    delay(900);
    tone(51, 415, 200);
    delay(300);
    tone(51, 392, 100);
    delay(100);
    tone(51, 415, 100);
    delay(100);
    tone(51, 392, 100);
    delay(100);
    tone(51, 349, 200);
    delay(300);
    tone(51, 392, 200);
    delay(300);
    tone(51, 247, 200);
    delay(300);
    tone(51, 262, 200);
    delay(300);


  }
  
  
}



void loop(void) {

  /* check whether the menu is active */
  if ( mui.isFormActive() ) {

    /* update the display content, if the redraw flag is set */
    if ( is_redraw ) {
      u8g2.firstPage();
      do {
          versatile_encoder.ReadEncoder(); // Do the encoder reading and processing
          mui.draw();
          versatile_encoder.ReadEncoder(); // Do the encoder reading and processing
      } while( u8g2.nextPage() );
      is_redraw = 0;                    /* clear the redraw flag */
    }
    if(animal_idx==1){
    digitalWrite(5, HIGH);
    }else{digitalWrite(5, LOW);}
    versatile_encoder.ReadEncoder(); // Do the encoder reading and processing
    handle_events();
      
    if ( is_stop_watch_running != 0 ) {
      stop_watch_timer = millis() - stop_watch_millis;
      is_redraw = 1;
    }

  } else {
      /* the menu should never become inactive, but if so, then restart the menu system */
      mui.gotoForm(/* form_id= / 1, / initial_cursor_position= */ 0);
  }
}
